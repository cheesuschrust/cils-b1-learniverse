
import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Progress } from "@/components/ui/progress";
import { useToast } from "@/components/ui/use-toast";
import { BookOpen, CheckCircle, Clock, Star, GraduationCap, Award, Route, Calendar, ArrowRight } from "lucide-react";
import { useAIUtils } from '@/contexts/AIUtilsContext';
import { ContentType, formatContentType, getContentTypeColor } from '@/types/contentType';

const LearningPathRecommendations = () => {
  const { settings, isProcessing } = useAIUtils();
  const { toast } = useToast();
  const [selectedTab, setSelectedTab] = useState("recommended");
  const [selectedPath, setSelectedPath] = useState<string | null>(null);
  
  // Sample learning paths - in a real app, these would be generated by AI based on user performance
  const learningPaths = [
    {
      id: "path-1",
      title: "Conversational Fluency",
      description: "Focus on speaking and listening skills to improve real-world conversation ability",
      difficulty: "intermediate",
      estimatedDays: 21,
      focus: ["speaking", "listening"],
      progress: 0,
      recommended: true,
      modules: [
        { id: "m1", title: "Everyday Greetings", type: "speaking" as ContentType, completed: false },
        { id: "m2", title: "Restaurant Conversations", type: "listening" as ContentType, completed: false },
        { id: "m3", title: "Travel Vocabulary", type: "flashcards" as ContentType, completed: false },
        { id: "m4", title: "Asking for Directions", type: "speaking" as ContentType, completed: false },
        { id: "m5", title: "Understanding Responses", type: "listening" as ContentType, completed: false },
      ]
    },
    {
      id: "path-2",
      title: "Grammar Foundations",
      description: "Strengthen your understanding of core grammar principles and sentence construction",
      difficulty: "beginner",
      estimatedDays: 14,
      focus: ["grammar", "writing"],
      progress: 35,
      recommended: true,
      modules: [
        { id: "m1", title: "Present Tense Verbs", type: "multiple-choice" as ContentType, completed: true },
        { id: "m2", title: "Articles and Nouns", type: "multiple-choice" as ContentType, completed: true },
        { id: "m3", title: "Basic Sentence Structure", type: "writing" as ContentType, completed: false },
        { id: "m4", title: "Past Tense Introduction", type: "multiple-choice" as ContentType, completed: false },
        { id: "m5", title: "Adjectives and Adverbs", type: "flashcards" as ContentType, completed: false },
      ]
    },
    {
      id: "path-3",
      title: "Vocabulary Expansion",
      description: "Rapidly expand your vocabulary with thematic word groups and usage practice",
      difficulty: "intermediate",
      estimatedDays: 30,
      focus: ["vocabulary", "reading"],
      progress: 15,
      recommended: false,
      modules: [
        { id: "m1", title: "Food and Dining", type: "flashcards" as ContentType, completed: true },
        { id: "m2", title: "Travel and Transportation", type: "multiple-choice" as ContentType, completed: false },
        { id: "m3", title: "Daily Activities", type: "speaking" as ContentType, completed: false },
        { id: "m4", title: "Work and Education", type: "flashcards" as ContentType, completed: false },
        { id: "m5", title: "Hobbies and Recreation", type: "writing" as ContentType, completed: false },
      ]
    },
    {
      id: "path-4",
      title: "Advanced Expression",
      description: "Master complex sentence structures and nuanced expression for fluent communication",
      difficulty: "advanced",
      estimatedDays: 45,
      focus: ["writing", "speaking"],
      progress: 0,
      recommended: false,
      modules: [
        { id: "m1", title: "Subjunctive Mood", type: "writing" as ContentType, completed: false },
        { id: "m2", title: "Idiomatic Expressions", type: "flashcards" as ContentType, completed: false },
        { id: "m3", title: "Complex Sentence Structures", type: "writing" as ContentType, completed: false },
        { id: "m4", title: "Debating and Persuasion", type: "speaking" as ContentType, completed: false },
        { id: "m5", title: "Literary Analysis", type: "writing" as ContentType, completed: false },
      ]
    }
  ];
  
  // Filter paths based on selected tab
  const filteredPaths = learningPaths.filter(path => {
    if (selectedTab === "recommended") return path.recommended;
    if (selectedTab === "inProgress") return path.progress > 0 && path.progress < 100;
    if (selectedTab === "completed") return path.progress === 100;
    return true; // "all" tab
  });
  
  // Get selected path details
  const pathDetails = learningPaths.find(path => path.id === selectedPath);
  
  // Handle path selection
  const handleSelectPath = (pathId: string) => {
    setSelectedPath(pathId);
  };
  
  // Handle adding a path to learning plan
  const handleAddPath = (pathId: string) => {
    toast({
      title: "Path added to your learning plan",
      description: "You can access this path from your dashboard anytime.",
      variant: "default"
    });
  };
  
  // Handle starting a module
  const handleStartModule = (moduleId: string) => {
    toast({
      title: "Module started",
      description: "Good luck with your learning!",
      variant: "default"
    });
  };
  
  return (
    <div className="space-y-6">
      <Tabs defaultValue="recommended" onValueChange={setSelectedTab} value={selectedTab}>
        <TabsList className="grid grid-cols-4 mb-4">
          <TabsTrigger value="recommended">Recommended</TabsTrigger>
          <TabsTrigger value="inProgress">In Progress</TabsTrigger>
          <TabsTrigger value="completed">Completed</TabsTrigger>
          <TabsTrigger value="all">All Paths</TabsTrigger>
        </TabsList>
        
        <TabsContent value={selectedTab} className="space-y-4">
          {filteredPaths.length === 0 ? (
            <Card>
              <CardContent className="pt-6 text-center">
                <p className="text-muted-foreground">No learning paths found in this category.</p>
              </CardContent>
            </Card>
          ) : (
            <>
              {filteredPaths.map(path => (
                <Card 
                  key={path.id}
                  className={`cursor-pointer transition-all hover:shadow-md ${selectedPath === path.id ? 'border-primary' : ''}`}
                  onClick={() => handleSelectPath(path.id)}
                >
                  <CardHeader className="pb-2">
                    <div className="flex justify-between items-start">
                      <div>
                        <CardTitle className="text-xl">{path.title}</CardTitle>
                        <CardDescription className="mt-1">{path.description}</CardDescription>
                      </div>
                      {path.recommended && (
                        <Badge variant="secondary" className="ml-2 bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200">
                          Recommended
                        </Badge>
                      )}
                    </div>
                  </CardHeader>
                  <CardContent className="pb-3">
                    <div className="flex flex-wrap gap-2 mb-3">
                      <Badge variant="outline" className="flex items-center gap-1">
                        <Star className="h-3 w-3" />
                        {path.difficulty}
                      </Badge>
                      <Badge variant="outline" className="flex items-center gap-1">
                        <Clock className="h-3 w-3" />
                        {path.estimatedDays} days
                      </Badge>
                      {path.focus.map(focus => (
                        <Badge key={focus} variant="outline">
                          {focus}
                        </Badge>
                      ))}
                    </div>
                    
                    <div className="space-y-1">
                      <div className="flex justify-between text-xs">
                        <span>Progress</span>
                        <span>{path.progress}%</span>
                      </div>
                      <Progress value={path.progress} className="h-2" />
                    </div>
                  </CardContent>
                </Card>
              ))}
            </>
          )}
        </TabsContent>
      </Tabs>
      
      {pathDetails && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Route className="h-5 w-5 text-primary" />
              {pathDetails.title} - Learning Path Details
            </CardTitle>
            <CardDescription>
              Estimated completion time: {pathDetails.estimatedDays} days
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="flex items-center gap-2 mb-4">
              <Badge variant="outline" className="flex items-center gap-1">
                <GraduationCap className="h-3 w-3" />
                {pathDetails.difficulty}
              </Badge>
              <Badge variant="outline" className="flex items-center gap-1">
                <Calendar className="h-3 w-3" />
                {pathDetails.modules.length} modules
              </Badge>
            </div>
            
            <div className="space-y-1 mb-4">
              <div className="flex justify-between text-xs">
                <span>Overall Progress</span>
                <span>{pathDetails.progress}%</span>
              </div>
              <Progress value={pathDetails.progress} className="h-2" />
            </div>
            
            <h3 className="text-sm font-medium mb-2">Modules:</h3>
            <ScrollArea className="h-[250px] rounded-md border p-4">
              <div className="space-y-4">
                {pathDetails.modules.map((module, index) => (
                  <div 
                    key={module.id} 
                    className={`p-3 rounded-lg border ${
                      module.completed ? 'bg-muted/50' : 'bg-background'
                    }`}
                  >
                    <div className="flex justify-between items-start">
                      <div className="flex items-start gap-3">
                        <div className="flex items-center justify-center h-6 w-6 rounded-full bg-primary/10 text-primary text-xs font-medium">
                          {index + 1}
                        </div>
                        <div>
                          <h4 className="text-sm font-medium flex items-center">
                            {module.title}
                            {module.completed && (
                              <CheckCircle className="h-4 w-4 text-green-500 ml-2" />
                            )}
                          </h4>
                          <div className="flex items-center mt-1">
                            <Badge 
                              variant="outline" 
                              className="text-xs px-2 py-0 h-5"
                              style={{
                                backgroundColor: `var(--${getContentTypeColor(module.type)}-100)`,
                                color: `var(--${getContentTypeColor(module.type)}-800)`,
                                borderColor: `var(--${getContentTypeColor(module.type)}-200)`
                              }}
                            >
                              {formatContentType(module.type)}
                            </Badge>
                            <span className="text-xs text-muted-foreground ml-2">
                              ~15 min
                            </span>
                          </div>
                        </div>
                      </div>
                      {!module.completed && (
                        <Button 
                          size="sm" 
                          variant="outline"
                          className="h-7 text-xs"
                          onClick={() => handleStartModule(module.id)}
                        >
                          Start
                          <ArrowRight className="ml-1 h-3 w-3" />
                        </Button>
                      )}
                    </div>
                  </div>
                ))}
              </div>
            </ScrollArea>
          </CardContent>
          <CardFooter className="justify-between">
            <Button variant="outline">
              View Details
            </Button>
            <Button onClick={() => handleAddPath(pathDetails.id)}>
              Add to My Learning Plan
            </Button>
          </CardFooter>
        </Card>
      )}
    </div>
  );
};

export default LearningPathRecommendations;
