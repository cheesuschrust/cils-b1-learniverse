import React, { useState, useEffect } from 'react';
import { supabase } from "@/integrations/supabase/client";

export default function DataWizard() {
  const [isActive, setIsActive] = useState(false);
  const [message, setMessage] = useState('');
  const [schemaText, setSchemaText] = useState(
    typeof window !== 'undefined' ? localStorage.getItem('datawizard_schema') || 
    `Users with email, name, avatar, and role
     User preferences with theme choice
     Learning content with title, type, content and premium flag
     User progress tracking
     Flashcards with italian and english, front and back
     Flashcard progress for users` : ''
  );

  // Initialize wizard on component mount
  useEffect(() => {
    const runInitialSetup = async () => {
      if (typeof window !== 'undefined' && !localStorage.getItem('datawizard_initialized')) {
        setIsActive(true);
        setMessage('Schema already initialized! You can make changes below.');
        localStorage.setItem('datawizard_initialized', 'true');
      }
    };
    
    runInitialSetup();
  }, []);

  // Parse schema description into SQL
  const generateSQL = (schemaDescription: string) => {
    // This simplified function converts English descriptions to SQL
    const lines = schemaDescription.split('\n').map(line => line.trim());
    let sql = '-- Generated by DataWizard\nCREATE EXTENSION IF NOT EXISTS "uuid-ossp";\n\n';

    lines.forEach(line => {
      if (!line) return;
      
      // Check for AI providers
      if (line.toLowerCase().includes('ai provider')) {
        sql += `-- AI Providers table
CREATE TABLE IF NOT EXISTS ai_providers (
  id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
  name TEXT NOT NULL,
  provider_type TEXT NOT NULL CHECK (provider_type IN ('huggingface', 'openai', 'azure', 'google', 'custom')),
  configuration JSONB NOT NULL,
  is_active BOOLEAN DEFAULT true,
  capabilities TEXT[] DEFAULT '{}',
  created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc', NOW()),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc', NOW()),
  created_by UUID REFERENCES users(id),
  updated_by UUID REFERENCES users(id)
);\n\n`;
      }
      
      // Check for exam or quiz related tables
      if (line.toLowerCase().includes('exam') || line.toLowerCase().includes('quiz')) {
        sql += `-- Exams table
CREATE TABLE IF NOT EXISTS exams (
  id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
  title TEXT NOT NULL,
  description TEXT NOT NULL,
  difficulty TEXT NOT NULL,
  time_limit INTEGER,
  passing_score INTEGER DEFAULT 70,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc', NOW()),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc', NOW()),
  created_by UUID REFERENCES users(id)
);\n\n`;

        sql += `-- Exam Questions table
CREATE TABLE IF NOT EXISTS exam_questions (
  id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
  exam_id UUID REFERENCES exams(id) ON DELETE CASCADE,
  question TEXT NOT NULL,
  options JSONB,
  correct_answer TEXT NOT NULL,
  explanation TEXT,
  points INTEGER DEFAULT 1,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc', NOW()),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc', NOW())
);\n\n`;

        sql += `-- User Exam Attempts table
CREATE TABLE IF NOT EXISTS user_exam_attempts (
  id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  exam_id UUID REFERENCES exams(id) ON DELETE CASCADE,
  score INTEGER,
  passed BOOLEAN,
  started_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc', NOW()),
  completed_at TIMESTAMP WITH TIME ZONE,
  time_spent INTEGER DEFAULT 0
);\n\n`;
      }
      
      // Check for new table types that weren't in the initial schema
      if (line.toLowerCase().includes('dictionary') || line.toLowerCase().includes('vocabulary')) {
        sql += `-- Dictionary/Vocabulary table
CREATE TABLE IF NOT EXISTS vocabulary (
  id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
  italian_word TEXT NOT NULL,
  english_translation TEXT NOT NULL,
  part_of_speech TEXT,
  difficulty_level TEXT,
  example_sentence TEXT,
  notes TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc', NOW()),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc', NOW())
);\n\n`;
      }
      
      // Check for user activity or analytics
      if (line.toLowerCase().includes('activity') || line.toLowerCase().includes('analytics')) {
        sql += `-- User Activity Log table
CREATE TABLE IF NOT EXISTS user_activity_log (
  id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
  user_id UUID REFERENCES users(id) ON DELETE CASCADE,
  activity_type TEXT NOT NULL,
  activity_details JSONB,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc', NOW())
);\n\n`;
      }
    });
    
    return sql;
  };

  // Update the database with the latest schema
  const updateDatabase = async () => {
    setIsActive(true);
    setMessage('Analyzing your schema description...');
    
    try {
      // Save the current schema to localStorage
      if (typeof window !== 'undefined') {
        localStorage.setItem('datawizard_schema', schemaText);
      }
      
      // Generate SQL from schema description
      const sqlScript = generateSQL(schemaText);
      
      setMessage('Updating your database...');
      
      // Execute the SQL through our edge function
      const { data, error } = await supabase.functions.invoke('pg-execute', { 
        body: { sql_string: sqlScript }
      });
      
      if (error) throw new Error(error.message);
      
      setMessage('âœ¨ Magic complete! Your database has been updated.');
      setTimeout(() => setIsActive(false), 3000);
    } catch (error: any) {
      console.error('DataWizard error:', error);
      setMessage(`ðŸ”® Magic interrupted: ${error.message || 'Unknown error occurred'}`);
    }
  };

  if (!isActive) {
    return (
      <button 
        onClick={() => setIsActive(true)}
        className="fixed bottom-4 right-4 bg-purple-600 text-white p-2 rounded-full shadow-lg hover:bg-purple-700"
        title="Update Database Schema"
      >
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
          <path d="M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z"></path>
          <polyline points="7.5 4.21 12 6.81 16.5 4.21"></polyline>
          <polyline points="7.5 19.79 7.5 14.6 3 12"></polyline>
          <polyline points="21 12 16.5 14.6 16.5 19.79"></polyline>
          <polyline points="3.27 6.96 12 12.01 20.73 6.96"></polyline>
          <line x1="12" y1="22.08" x2="12" y2="12"></line>
        </svg>
      </button>
    );
  }

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
      <div className="bg-white rounded-lg shadow-xl w-full max-w-lg p-6 dark:bg-gray-800">
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-xl font-bold text-purple-800 dark:text-purple-400">âœ¨ DataWizard</h2>
          <button 
            onClick={() => setIsActive(false)}
            className="text-gray-500 hover:text-gray-700 dark:text-gray-300 dark:hover:text-gray-100"
          >
            âœ•
          </button>
        </div>
        
        <p className="mb-4 text-gray-600 dark:text-gray-300">
          Describe your database needs in plain English, and I'll create the tables for you automatically!
        </p>
        
        <textarea
          value={schemaText}
          onChange={(e) => setSchemaText(e.target.value)}
          className="w-full h-32 p-2 border border-gray-300 rounded mb-4 dark:bg-gray-700 dark:border-gray-600 dark:text-gray-100"
          placeholder="Example: Users with email and name, Products with price and description..."
        />
        
        <div className="flex justify-end gap-2">
          <button
            onClick={() => setIsActive(false)}
            className="px-4 py-2 bg-gray-200 rounded hover:bg-gray-300 dark:bg-gray-700 dark:hover:bg-gray-600 dark:text-gray-200"
          >
            Cancel
          </button>
          <button
            onClick={updateDatabase}
            className="px-4 py-2 bg-purple-600 text-white rounded hover:bg-purple-700"
          >
            Update Database
          </button>
        </div>
        
        {message && (
          <div className="mt-4 p-3 bg-purple-100 text-purple-800 rounded dark:bg-purple-900 dark:text-purple-200">
            {message}
          </div>
        )}
      </div>
    </div>
  );
}
